type User {
  _id: String
  email: String
  username: String
  password: String
  fullname: String
  avatar: String
  followers: [String]
  followings: [String]
  createAt: String
  role: String
  description: String
  savedPost: [String]
}

type LoginResponse {
  id: String
	token: String
}

input CreateUserInput {
  email: String
  username: String
  password: String
  fullname: String
}

input EditUserInput {
  email: String
  password: String
  fullname: String
}

input LoginRequest {
  email: String
  password: String
}

type Mutation {
  createUser(input: CreateUserInput): User
  login(input: LoginRequest): LoginResponse
  updateUser(_id: String, input: EditUserInput): User
  forgotPassword(email: String): User
  updateAvatar(_id: String, avatar: String): User
  deleteAllUser: Boolean
  toggleFollow(_id: String, idFollowing: String):User
  savePostToggle(_id: String, idPost: String): User
  updateDescription(_id: String ,description: String): User
  
}

type Query {
  hello: String
  getAllUser: [User]  
  getUserByPost(idPost: String): User
  me(token: String): User
  getUserById(id: [String]): [User]
}