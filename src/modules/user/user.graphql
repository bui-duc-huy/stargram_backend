directive @hasRoles(roles: [String]) on FIELD | FIELD_DEFINITION

enum Roles {
    ADMIN
    MEMBER
}

type User {
  _id: String
  email: String
  username: String
  password: String
  fullname: String
  avatar: String
  dob: String
  followers: [String]
  followings: [String]
  createAt: String
  role: Roles
  description: String
  savedPost: [String]
}

type LoginResponse {
  id: String
	token: String
}

input CreateUserInput {
  email: String
  username: String
  password: String
  fullname: String
}

input EditUserInput {
  email: String
  password: String
  fullname: String
}

input LoginRequest {
  email: String
  password: String
}

type Mutation {
  createUser(input: CreateUserInput): User 
  login(input: LoginRequest): LoginResponse
  updateUser(_id: String, input: EditUserInput): User @hasRoles(roles: ["MEMBER", "ADMIN"])
  forgotPassword(email: String): User @hasRoles(roles: ["MEMBER", "ADMIN"])
  updateAvatar(_id: String, avatar: String): User @hasRoles(roles: ["MEMBER", "ADMIN"])
  deleteAllUser: Boolean @hasRoles(roles: ["ADMIN"])
  toggleFollow(_id: String, idFollowing: String):User @hasRoles(roles: ["MEMBER", "ADMIN"])
  savePostToggle(_id: String, idPost: String): User @hasRoles(roles: ["MEMBER", "ADMIN"])
  updateDescription(_id: String ,description: String): User @hasRoles(roles: ["MEMBER", "ADMIN"])
}

type Query {
  hello: String
  getAllUser: [User] @hasRoles(roles: ["ADMIN"]) 
  getUserByPost(idPost: String): User @hasRoles(roles: ["MEMBER", "ADMIN"])
  me: User @hasRoles(roles: ["MEMBER", "ADMIN"])
  getUserById(id: [String]): [User] @hasRoles(roles: ["MEMBER", "ADMIN"])
}