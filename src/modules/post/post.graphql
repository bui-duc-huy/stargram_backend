directive @hasRoles(roles: [String]) on FIELD | FIELD_DEFINITION  

type Post {
    _id: String
    description: String
    thumbnails: [String]
    likes: [String]
    creator: String
    comments: [CommentType]
    createAt: String
}

type CommentType {
    _id: String
    creator: String
    thumbnails: String
    description: String
    commentAt: String
    likes: [String]
}

type PostResponse{
    post: Post
    creator: User
}

type Query { 
    getAllPost: [PostResponse] @hasRoles(roles: ["ADMIN", "MEMBER"])
    getPostByUser(idCreator: String): [Post] @hasRoles(roles: ["MEMBER", "ADMIN"])
}

input AddPostInput {
    description: String
    thumbnails: [String]
}

input EditPostInput { 
    description: String
    thumbnails: [String]
}

input CommentPostInput {
    description: String
    thumbnails: String
}

type Mutation { 
    createPost(input: AddPostInput): PostResponse @hasRoles(roles: ["MEMBER", "ADMIN"])
    editPost(idPost: String , input: EditPostInput): Post @hasRoles(roles: ["MEMBER", "ADMIN"])
    deletePost(idPost: String): Boolean @hasRoles(roles: ["MEMBER", "ADMIN"])
    toggleLikePost(idPost: String): Boolean @hasRoles(roles: ["MEMBER", "ADMIN"])
    commentPost(idPost: String, input: CommentPostInput): Post @hasRoles(roles: ["MEMBER", "ADMIN"])
    toggleLikeComment(idPost: String, idComment: String): Post @hasRoles(roles: ["MEMBER", "ADMIN"])
    deleteComment(idPost: String, idComment: String): Post @hasRoles(roles: ["MEMBER", "ADMIN"])
    deleteAllPost: Boolean  @hasRoles(roles: ["ADMIN"])
}
